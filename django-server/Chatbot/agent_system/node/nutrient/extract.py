from typing import Dict, Any, List
import json

from ...state import AgentState
from ..base import get_llm_json_response

def extract_nutrient_info(state: AgentState) -> Dict[str, Any]:
    """
    사용자 입력에서 영양소 관련 정보를 추출하는 노드
    
    Args:
        state: 현재 에이전트 상태
        
    Returns:
        변경된 상태 필드만 포함하는 딕셔너리
    """
    # 가장 최근 사용자 메시지 추출
    messages = state.get("messages", [])
    latest_message = messages[-1]
    
    user_query = latest_message.content
    
    # 영양소 리스트 정의
    nutrient_lst = [
        "비타민 A", "베타카로틴", "비타민 D", "비타민 E", "비타민 K", "비타민 B1", "비타민 B2",
        "나이아신", "판토텐산", "비타민 B6", "엽산", "비타민 B12", "비오틴", "비타민 C", "칼슘", "마그네슘",
        "철", "아연", "구리", "셀레늄", "요오드", "망간", "몰리브덴", "칼륨", "크롬", "루테인", "인",
        "메티오닌", "시스테인", "류신", "트립토판", "이소류신", "라이신", "트레오닌", "페닐알라닌", "티로신"
    ]
    
    # 시스템 프롬프트 정의
    system_prompt = f"""당신은 사용자의 메시지에서 **정확하게 영양소 이름만 추출**하는 전문가입니다.

다음은 추출할 수 있는 **정의된 영양소 목록**입니다. 이 목록에 있는 영양소만 추출해야 합니다:
{', '.join(nutrient_lst)}

사용자의 메시지에서 영양소를 찾을 때는 다음 사항을 고려해주세요:
* **목록에 없는 영양소는 추출하지 않습니다.**
* **복수형이나 일반적인 표현** (예: "비타민들", "미네랄류")을 포함하더라도 해당하는 단일 영양소 이름으로 추출합니다.

추출된 영양소 이름을 다음 **JSON 형식**으로만 반환해주세요:
{{
  "nutrients": ["영양소1", "영양소2", ...]
}}

**예시:**
사용자 입력: "저는 비타민C와 철분, 그리고 약간의 칼슘이 필요해요."
출력:
{{
  "nutrients": ["비타민C", "철분", "칼슘"]
}}"""

    # LLM에 요청하여 영양소 정보 추출
    result = get_llm_json_response(
        system_prompt=system_prompt,
        user_prompt=user_query
    )
    
    nutrients = result.get("nutrients", [])

    if not nutrients:
        response = get_llm_json_response(
            system_prompt=f"""당신은 **영양소 및 영양제에 대한 전문 지식을 갖춘 친절하고 유용한 챗봇 '영양이'**입니다.
사용자에게 어떤 영양소에 대한 정보를 얻고싶은지 네 문장으로 물어보세요.

사용자와의 대화를 시작할 때, 다음 지침에 따라 영양소 정보를 제안해주세요:
1. 사용자의 사전 설문조사 내용을 면밀히 검토**하여 사용자의 건강 및 생활 습관과 연관성이 높은 영양소를 파악하세요.
2. 제공된 영양소 목록(`{', '.join(nutrient_lst)}`)에서 **사용자 맞춤형 영양소 3가지를 엄선하여 추천**해주세요.
3. 추천하는 각 영양소에 대해 **왜 해당 영양소가 사용자에게 도움이 될 수 있는지 설문조사 내용과 연관 지어 간략하게 설명**해주세요. (예: "주로 실내에서 활동하신다고 하셨으니, 뼈 건강과 면역력에 중요한 비타민 D 정보가 필요하실까요?")
4. 마지막으로, 사용자가 **어떤 영양소에 대해 더 자세한 정보를 얻고 싶은지 구체적으로 질문**하며 대화를 이어갈 수 있도록 유도해주세요. 질문은 자연스럽고 친근한 어조로 구성합니다.
5. 영양소를 출력할 때는 ``을 사용하여 인라인 코드로 표현하세요.
  - 예시: `비타민 C`, `칼슘`, `철`

사전 설문조사 내용은 다음과 같습니다:
**사전 설문 조사**: {state['user_health_info']}

영양소 예시는 다음과 같습니다:
**영양소**: {', '.join(nutrient_lst)}

---

아래는 사용자의 입력과 출력 예시 입니다. 사용자 입력의 문맥에 맞는 답변을 출력 예시를 참고하여 작성해주세요.

**사용자 입력:**
{user_query}

**출력 예시(참고용):**
[사용자 이름]님! [사용자 입력에 따른 질문 파악]. [설문 조사 결과 분석 내용].
이러한 점을 고려하여 몇 가지 영양소를 추천드리고 싶습니다.

[영양소 목록에 포함된 영양소 1]: [영양소 추천 이유]

[영양소 목록에 포함된 영양소 2]: [영양소 추천 이유]

[영양소 목록에 포함된 영양소 3]: [영양소 추천 이유]

이 중에서 어떤 영양소에 대해 더 자세히 알고 싶으신지 말씀해주시면 더 많은 정보를 알려드릴게요!
필요하시다면 영양제를 추천해드릴 수도 있어요!
""",
            user_prompt=user_query,
            response_format_json=False
        )

        print(f"정보 부족으로 진행할 수 없습니다: {response}")

        return {
            "response": response,
            "is_enough_nut_info": False
        }
    
    # 변경된 상태 필드만 반환
    return {
        "nutrients": nutrients,
        "is_enough_nut_info": True
    } 